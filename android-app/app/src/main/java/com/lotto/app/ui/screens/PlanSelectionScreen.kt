package com.lotto.app.ui.screens

import android.app.Activity
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.lotto.app.ui.theme.NotionColors
import com.lotto.app.viewmodel.SubscriptionViewModel

/**
 * Ï≤´ Í∞ÄÏûÖÏûêÎ•º ÏúÑÌïú ÌîåÎûú ÏÑ†ÌÉù ÌôîÎ©¥
 */
@Composable
fun PlanSelectionScreen(
    onFreePlanSelected: () -> Unit,
    onProPlanSelected: () -> Unit,
    subscriptionViewModel: SubscriptionViewModel,
    activity: Activity
) {
    var selectedPlan by remember { mutableStateOf<String?>(null) }
    val isProUser by subscriptionViewModel.isProUser.collectAsStateWithLifecycle()
    
    // PRO Íµ¨ÎèÖ ÏôÑÎ£å Ïãú ÏûêÎèôÏúºÎ°ú Î©îÏù∏ÏúºÎ°ú Ïù¥Îèô
    LaunchedEffect(isProUser) {
        if (isProUser) {
            onFreePlanSelected() // Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô (Ìä∏ÎùºÏù¥ÏñºÏùÄ ÏÑúÎ≤ÑÏóêÏÑú ÏûêÎèô Ï≤òÎ¶¨)
        }
    }
    
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(NotionColors.Background)
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .verticalScroll(rememberScrollState())
                .padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(24.dp)
        ) {
            Spacer(modifier = Modifier.height(40.dp))
            
            // Ìó§Îçî
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Text(
                    text = "üé±",
                    fontSize = 64.sp
                )
                Text(
                    text = "Î°úÎòêÏó∞Íµ¨ÏÜåÏóê Ïò§Ïã† Í≤ÉÏùÑ\nÌôòÏòÅÌï©ÎãàÎã§!",
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold,
                    color = NotionColors.TextPrimary,
                    textAlign = TextAlign.Center
                )
                Text(
                    text = "ÏãúÏûëÌïòÍ∏∞ Ï†ÑÏóê ÌîåÎûúÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî",
                    fontSize = 15.sp,
                    color = NotionColors.TextSecondary,
                    textAlign = TextAlign.Center
                )
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Î¨¥Î£å ÌîåÎûú Ïπ¥Îìú
            PlanCard(
                title = "Î¨¥Î£å ÌîåÎûú",
                subtitle = "30Ïùº Î¨¥Î£å Ï≤¥Ìóò",
                price = "Î¨¥Î£å",
                features = listOf(
                    "Î≤àÌò∏ Ï∂îÏ≤ú ÏïåÍ≥†Î¶¨Ï¶ò" to true,
                    "Í≥†Í∏â Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏" to true,
                    "ÎÇ¥ Î≤àÌò∏ Ï†ÄÏû• Í∏∞Îä•" to true,
                    "Í¥ëÍ≥† Ï†úÍ±∞" to false
                ),
                isSelected = selectedPlan == "free",
                isPremium = false,
                onClick = { selectedPlan = "free" }
            )
            
            // ÌîÑÎ°ú ÌîåÎûú Ïπ¥Îìú
            PlanCard(
                title = "ÌîÑÎ°ú ÌîåÎûú",
                subtitle = "ÏûêÎèô Í∞±Ïã† Íµ¨ÎèÖ",
                price = "‚Ç©1,000/Ïõî",
                features = listOf(
                    "Î≤àÌò∏ Ï∂îÏ≤ú ÏïåÍ≥†Î¶¨Ï¶ò" to true,
                    "Í≥†Í∏â Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏" to true,
                    "ÎÇ¥ Î≤àÌò∏ Ï†ÄÏû• Í∏∞Îä•" to true,
                    "Í¥ëÍ≥† ÏóÜÏùå" to true,
                    "Ïñ∏Ï†úÎì†ÏßÄ Ï∑®ÏÜå Í∞ÄÎä•" to true
                ),
                isSelected = selectedPlan == "pro",
                isPremium = true,
                onClick = { selectedPlan = "pro" }
            )
            
            Spacer(modifier = Modifier.height(8.dp))
            
            // ÏãúÏûëÌïòÍ∏∞ Î≤ÑÌäº
            Button(
                onClick = {
                    when (selectedPlan) {
                        "free" -> onFreePlanSelected()
                        "pro" -> {
                            // Î∞îÎ°ú Google Play Í≤∞Ï†ú ÏãúÏûë
                            subscriptionViewModel.startSubscription(activity)
                        }
                    }
                },
                enabled = selectedPlan != null,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF6366F1),
                    disabledContainerColor = Color(0xFFE0E0E0)
                ),
                shape = RoundedCornerShape(12.dp)
            ) {
                Text(
                    text = when (selectedPlan) {
                        "free" -> "30Ïùº Î¨¥Î£åÎ°ú ÏãúÏûëÌïòÍ∏∞"
                        "pro" -> "‚Ç©1,000/Ïõî Íµ¨ÎèÖÌïòÍ∏∞"
                        else -> "ÌîåÎûúÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"
                    },
                    fontSize = 16.sp,
                    fontWeight = FontWeight.SemiBold
                )
            }
            
            // Í≤∞Ï†ú ÏïàÎÇ¥ Î¨∏Íµ¨
            if (selectedPlan == "pro") {
                Text(
                    text = "‚Ä¢ Google PlayÎ•º ÌÜµÌï¥ ÏïàÏ†ÑÌïòÍ≤å Í≤∞Ï†úÎê©ÎãàÎã§\n‚Ä¢ Îß§Îã¨ ÏûêÎèôÏúºÎ°ú Í∞±Ïã†ÎêòÎ©∞, Ïñ∏Ï†úÎì†ÏßÄ Ï∑®ÏÜå Í∞ÄÎä•Ìï©ÎãàÎã§",
                    fontSize = 12.sp,
                    color = NotionColors.TextSecondary,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.padding(horizontal = 24.dp)
                )
            }
            
            Spacer(modifier = Modifier.height(24.dp))
        }
    }
}

@Composable
private fun PlanCard(
    title: String,
    subtitle: String,
    price: String,
    features: List<Pair<String, Boolean>>,
    isSelected: Boolean,
    isPremium: Boolean,
    onClick: () -> Unit
) {
    val borderColor = when {
        isSelected && isPremium -> Color(0xFF6366F1)
        isSelected -> Color(0xFF10B981)
        else -> NotionColors.Border
    }
    
    val backgroundColor = when {
        isSelected && isPremium -> Color(0xFF6366F1).copy(alpha = 0.05f)
        isSelected -> Color(0xFF10B981).copy(alpha = 0.05f)
        else -> Color.White
    }
    
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .border(
                width = if (isSelected) 2.dp else 1.dp,
                color = borderColor,
                shape = RoundedCornerShape(16.dp)
            )
            .clickable(onClick = onClick),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = backgroundColor
        ),
        elevation = CardDefaults.cardElevation(
            defaultElevation = if (isSelected) 4.dp else 1.dp
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Ìó§Îçî
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        Text(
                            text = title,
                            fontSize = 20.sp,
                            fontWeight = FontWeight.Bold,
                            color = NotionColors.TextPrimary
                        )
                        if (isPremium) {
                            Text(
                                text = "Ï∂îÏ≤ú",
                                fontSize = 11.sp,
                                fontWeight = FontWeight.SemiBold,
                                color = Color.White,
                                modifier = Modifier
                                    .background(
                                        color = Color(0xFF6366F1),
                                        shape = RoundedCornerShape(4.dp)
                                    )
                                    .padding(horizontal = 6.dp, vertical = 2.dp)
                            )
                        }
                    }
                    Text(
                        text = subtitle,
                        fontSize = 13.sp,
                        color = NotionColors.TextSecondary
                    )
                }
                
                // ÏÑ†ÌÉù Ïù∏ÎîîÏºÄÏù¥ÌÑ∞
                if (isSelected) {
                    Surface(
                        shape = RoundedCornerShape(20.dp),
                        color = if (isPremium) Color(0xFF6366F1) else Color(0xFF10B981)
                    ) {
                        Text(
                            text = "‚úì",
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Bold,
                            color = Color.White,
                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp)
                        )
                    }
                }
            }
            
            // Í∞ÄÍ≤©
            Text(
                text = price,
                fontSize = 28.sp,
                fontWeight = FontWeight.Bold,
                color = if (isPremium) Color(0xFF6366F1) else Color(0xFF10B981)
            )
            
            Divider(color = NotionColors.Border)
            
            // Í∏∞Îä• Î™©Î°ù
            Column(
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                features.forEach { (feature, available) ->
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        Text(
                            text = if (available) "‚úì" else "‚úó",
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Bold,
                            color = if (available) {
                                if (isPremium) Color(0xFF6366F1) else Color(0xFF10B981)
                            } else {
                                Color(0xFFBDBDBD)
                            }
                        )
                        Text(
                            text = feature,
                            fontSize = 14.sp,
                            color = if (available) NotionColors.TextPrimary else NotionColors.TextSecondary
                        )
                    }
                }
            }
        }
    }
}
