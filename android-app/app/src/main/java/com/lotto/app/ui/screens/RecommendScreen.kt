package com.lotto.app.ui.screens

import android.content.Context
import android.content.Intent
import android.widget.Toast
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.kakao.sdk.share.ShareClient
import com.kakao.sdk.share.WebSharerClient
import com.kakao.sdk.template.model.Button
import com.kakao.sdk.template.model.Content
import com.kakao.sdk.template.model.FeedTemplate
import com.kakao.sdk.template.model.Link
import com.lotto.app.data.model.RecommendResponse
import com.lotto.app.ui.components.LoadingIndicator
import com.lotto.app.ui.components.LottoSetCard
import com.lotto.app.viewmodel.LottoViewModel
import com.lotto.app.viewmodel.UiState

/**
 * Ï∂îÏ≤ú Î≤àÌò∏ ÌôîÎ©¥
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RecommendScreen(
    viewModel: LottoViewModel,
    savedNumberViewModel: com.lotto.app.viewmodel.SavedNumberViewModel,
    onNavigateBack: () -> Unit
) {
    val recommendState by viewModel.recommendState.collectAsStateWithLifecycle()
    val isLoading by savedNumberViewModel.isLoading.collectAsStateWithLifecycle()
    val successMessage by savedNumberViewModel.successMessage.collectAsStateWithLifecycle()
    val error by savedNumberViewModel.error.collectAsStateWithLifecycle()
    var numberOfSets by remember { mutableIntStateOf(5) }
    var selectedMode by remember { mutableStateOf("ai") }
    
    // ÌôîÎ©¥ ÏßÑÏûÖ Ïãú ÏûêÎèôÏúºÎ°ú Î≤àÌò∏ Ï∂îÏ≤ú
    LaunchedEffect(Unit) {
        viewModel.recommendNumbers(numberOfSets, selectedMode)
    }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "Î°úÎòê Î≤àÌò∏ Ï∂îÏ≤ú",
                        fontWeight = FontWeight.Bold
                    )
                },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Îí§Î°ú Í∞ÄÍ∏∞"
                        )
                    }
                },
                actions = {
                    // Ïû¨Ï∂îÏ≤ú Î≤ÑÌäº
                    IconButton(
                        onClick = { viewModel.recommendNumbers(numberOfSets, selectedMode) }
                    ) {
                        Icon(
                            imageVector = Icons.Default.Refresh,
                            contentDescription = "Ïû¨Ï∂îÏ≤ú"
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimary,
                    actionIconContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            when (val state = recommendState) {
                is UiState.Idle -> {
                    LoadingIndicator(message = "Î≤àÌò∏ Ï∂îÏ≤ú Ï§ÄÎπÑ Ï§ë...")
                }
                
                is UiState.Loading -> {
                    LoadingIndicator(message = "AIÍ∞Ä Î≤àÌò∏Î•º Î∂ÑÏÑùÌïòÎäî Ï§ë...")
                }
                
                is UiState.Success<*> -> {
                    val response = state.data as? RecommendResponse
                    if (response == null) {
                        Text(
                            text = "Îç∞Ïù¥ÌÑ∞ ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§",
                            modifier = Modifier.align(Alignment.Center)
                        )
                        return@Box
                    }
                    
                    val context = LocalContext.current
                    var showSaveDialog by remember { mutableStateOf<List<Int>?>(null) }
                    var memoText by remember { mutableStateOf("") }
                    
                    // Ï†ÄÏû• Í≤∞Í≥º ÌÜ†Ïä§Ìä∏
                    LaunchedEffect(successMessage) {
                        successMessage?.let { message ->
                            Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
                        }
                    }
                    
                    LaunchedEffect(error) {
                        error?.let { errorMsg ->
                            Toast.makeText(context, "Ï†ÄÏû• Ïã§Ìå®: $errorMsg", Toast.LENGTH_SHORT).show()
                        }
                    }
                    
                    LazyColumn(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        verticalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        // Î™®Îìú ÏÑ†ÌÉù Ïπ¥Îìú
                        item {
                            ModeSelectionCard(
                                selectedMode = selectedMode,
                                onModeSelected = { mode ->
                                    selectedMode = mode
                                    viewModel.recommendNumbers(numberOfSets, mode)
                                }
                            )
                        }
                        
                        item { Spacer(modifier = Modifier.height(8.dp)) }
                        
                        // Ìó§Îçî Ï†ïÎ≥¥
                        item {
                            Card(
                                modifier = Modifier.fillMaxWidth(),
                                colors = CardDefaults.cardColors(
                                    containerColor = MaterialTheme.colorScheme.primaryContainer
                                )
                            ) {
                                Column(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(16.dp),
                                    horizontalAlignment = Alignment.CenterHorizontally
                                ) {
                                    Text(
                                        text = "üé≤ Ï∂îÏ≤ú Î≤àÌò∏",
                                        fontSize = 20.sp,
                                        fontWeight = FontWeight.Bold,
                                        color = MaterialTheme.colorScheme.onPrimaryContainer
                                    )
                                    Spacer(modifier = Modifier.height(8.dp))
                                    Text(
                                        text = "Í∏∞Ï§Ä: ${response.lastDraw}ÌöåÏ∞®ÍπåÏßÄ",
                                        fontSize = 14.sp,
                                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)
                                    )
                                }
                            }
                        }
                        
                        item { Spacer(modifier = Modifier.height(8.dp)) }
                        
                        // Ï∂îÏ≤ú Î≤àÌò∏ ÏÑ∏Ìä∏Îì§
                        itemsIndexed(response.sets) { index, lottoSet ->
                            Column {
                                LottoSetCard(
                                    setNumber = index + 1,
                                    lottoSet = lottoSet
                                )
                                
                                Spacer(modifier = Modifier.height(8.dp))
                                
                                // ÏÑ∏Ìä∏Î≥Ñ Ï†ÄÏû• Î≤ÑÌäº
                                OutlinedButton(
                                    onClick = { showSaveDialog = lottoSet.numbers },
                                    modifier = Modifier.fillMaxWidth()
                                ) {
                                    Icon(
                                        imageVector = Icons.Default.Add,
                                        contentDescription = null,
                                        modifier = Modifier.size(18.dp)
                                    )
                                    Spacer(modifier = Modifier.width(8.dp))
                                    Text("Ïù¥ Î≤àÌò∏ Ï†ÄÏû•ÌïòÍ∏∞")
                                }
                            }
                        }
                        
                        item { Spacer(modifier = Modifier.height(16.dp)) }
                        
                        // Í≥µÏú† Î≤ÑÌäºÎì§ÏùÑ RowÎ°ú Î∞∞Ïπò
                        item {
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.spacedBy(8.dp)
                            ) {
                                // Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú† Î≤ÑÌäº
                                Button(
                                    onClick = {
                                        shareToKakao(context, response.sets, response.lastDraw)
                                    },
                                    modifier = Modifier
                                        .weight(1f)
                                        .height(56.dp),
                                    colors = ButtonDefaults.buttonColors(
                                        containerColor = Color(0xFFFFE812) // Ïπ¥Ïπ¥Ïò§ ÏòêÎ°úÏö∞
                                    )
                                ) {
                                    Text(
                                        text = "üí¨ Ïπ¥ÌÜ°",
                                        fontSize = 16.sp,
                                        fontWeight = FontWeight.Bold,
                                        color = Color(0xFF3C1E1E)
                                    )
                                }
                                
                                // ÏùºÎ∞ò Í≥µÏú† Î≤ÑÌäº
                                Button(
                                    onClick = {
                                        // Í≥µÏú†Ìï† ÌÖçÏä§Ìä∏ ÏÉùÏÑ±
                                        val shareText = buildShareText(response.sets, response.lastDraw)
                                        
                                        // Android Í≥µÏú† Intent
                                        val sendIntent = Intent().apply {
                                            action = Intent.ACTION_SEND
                                            putExtra(Intent.EXTRA_TEXT, shareText)
                                            type = "text/plain"
                                        }
                                        
                                        val shareIntent = Intent.createChooser(sendIntent, "Î°úÎòê Î≤àÌò∏ Í≥µÏú†ÌïòÍ∏∞")
                                        context.startActivity(shareIntent)
                                    },
                                    modifier = Modifier
                                        .weight(1f)
                                        .height(56.dp),
                                    colors = ButtonDefaults.buttonColors(
                                        containerColor = MaterialTheme.colorScheme.primary
                                    )
                                ) {
                                    Icon(
                                        imageVector = Icons.Default.Share,
                                        contentDescription = null,
                                        modifier = Modifier.size(20.dp)
                                    )
                                    Spacer(modifier = Modifier.width(4.dp))
                                    Text(
                                        text = "ÏπúÍµ¨ÏóêÍ≤å Í≥µÏú†",
                                        fontSize = 14.sp,
                                        fontWeight = FontWeight.Bold
                                    )
                                }
                            }
                        }
                        
                        item { Spacer(modifier = Modifier.height(8.dp)) }
                    }
                    
                    // Ï†ÄÏû• Îã§Ïù¥ÏñºÎ°úÍ∑∏
                    showSaveDialog?.let { numbers ->
                        AlertDialog(
                            onDismissRequest = { 
                                showSaveDialog = null
                                memoText = ""
                            },
                            title = { Text("Î≤àÌò∏ Ï†ÄÏû•") },
                            text = {
                                Column {
                                    Text("Ïù¥ Î≤àÌò∏Î•º Ï†ÄÏû•ÌïòÏãúÍ≤†ÏäµÎãàÍπå?")
                                    Spacer(modifier = Modifier.height(16.dp))
                                    TextField(
                                        value = memoText,
                                        onValueChange = { memoText = it },
                                        label = { Text("Î©îÎ™® (ÏÑ†ÌÉùÏÇ¨Ìï≠)") },
                                        placeholder = { Text("Ïòà: ÏÉùÏùº, ÌñâÏö¥Ïùò Î≤àÌò∏") },
                                        modifier = Modifier.fillMaxWidth(),
                                        singleLine = true
                                    )
                                }
                            },
                            confirmButton = {
                                TextButton(
                                    onClick = {
                                        // SavedNumberViewModel ÏÇ¨Ïö©ÌïòÏó¨ ÏÑúÎ≤ÑÏóê Ï†ÄÏû•
                                        savedNumberViewModel.saveNumber(
                                            numbers = numbers,
                                            nickname = memoText.ifBlank { "AI Ï∂îÏ≤ú Î≤àÌò∏" },
                                            memo = null
                                        )
                                        showSaveDialog = null
                                        memoText = ""
                                    }
                                ) {
                                    Text("Ï†ÄÏû•")
                                }
                            },
                            dismissButton = {
                                TextButton(onClick = { 
                                    showSaveDialog = null
                                    memoText = ""
                                }) {
                                    Text("Ï∑®ÏÜå")
                                }
                            }
                        )
                    }
                }
                
                is UiState.Error -> {
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(32.dp),
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.Center
                    ) {
                        Text(
                            text = "‚ùå",
                            fontSize = 48.sp
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text(
                            text = "Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§",
                            fontSize = 20.sp,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.error
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = state.message,
                            fontSize = 14.sp,
                            color = MaterialTheme.colorScheme.onBackground.copy(alpha = 0.7f)
                        )
                        Spacer(modifier = Modifier.height(24.dp))
                        Button(
                            onClick = { viewModel.recommendNumbers(numberOfSets) }
                        ) {
                            Icon(imageVector = Icons.Default.Refresh, contentDescription = null)
                            Spacer(modifier = Modifier.width(8.dp))
                            Text("Îã§Ïãú ÏãúÎèÑ")
                        }
                    }
                }
            }
        }
    }
}

/**
 * Í≥µÏú†Ìï† ÌÖçÏä§Ìä∏ ÏÉùÏÑ± Ìï®Ïàò
 */
private fun buildShareText(sets: List<com.lotto.app.data.model.LottoSet>, lastDraw: Int): String {
    val builder = StringBuilder()
    
    builder.append("üé∞ AI Î°úÎòê Î≤àÌò∏ Ï∂îÏ≤ú\n")
    builder.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
    builder.append("Í∏∞Ï§Ä: ${lastDraw}ÌöåÏ∞®ÍπåÏßÄ\n\n")
    
    sets.forEachIndexed { index, lottoSet ->
        builder.append("ÏÑ∏Ìä∏ ${index + 1}: ")
        builder.append(lottoSet.numbers.joinToString(", ") { String.format("%02d", it) })
        builder.append("\n")
    }
    
    builder.append("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
    builder.append("üí° Í≥ºÍ±∞ Ï∂úÌòÑ ÎπàÎèÑ Í∏∞Î∞ò AI Ï∂îÏ≤ú\n")
    builder.append("üì± Î°úÎòê Î≤àÌò∏ Ï∂îÏ≤ú Ïï±\n")
    
    return builder.toString()
}

/**
 * Ïπ¥Ïπ¥Ïò§ÌÜ°ÏúºÎ°ú Í≥µÏú†ÌïòÍ∏∞ (Ïù¥ÎØ∏ÏßÄ Ìè¨Ìï®)
 */
private fun shareToKakao(
    context: Context,
    sets: List<com.lotto.app.data.model.LottoSet>,
    lastDraw: Int
) {
    // Ï∂îÏ≤ú Î≤àÌò∏Î•º ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôò
    val numbersText = sets.mapIndexed { index, lottoSet ->
        "ÏÑ∏Ìä∏ ${index + 1}: ${lottoSet.numbers.joinToString(", ") { String.format("%02d", it) }}"
    }.joinToString("\n")
    
    // Ïπ¥Ïπ¥Ïò§ÌÜ° ÌîºÎìú ÌÖúÌîåÎ¶ø ÏÉùÏÑ±
    val feedTemplate = FeedTemplate(
        content = Content(
            title = "üé∞ AI Î°úÎòê Î≤àÌò∏ Ï∂îÏ≤ú ü§ñ",
            description = "AIÍ∞Ä Í≥ºÍ±∞ ${lastDraw}ÌöåÏ∞® Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑùÌïú Ï∂îÏ≤ú Î≤àÌò∏\n\n$numbersText\n\nÌñâÏö¥ÏùÑ ÎπïÎãàÎã§! üçÄ",
            imageUrl = "https://web-production-43fb4.up.railway.app/kakao-share-image",
            link = Link(
                webUrl = "https://www.dhlottery.co.kr",
                mobileWebUrl = "https://m.dhlottery.co.kr"
            )
        ),
        buttons = listOf(
            Button(
                title = "Î°úÎòê Íµ¨Îß§ÌïòÎü¨ Í∞ÄÍ∏∞",
                link = Link(
                    webUrl = "https://www.dhlottery.co.kr",
                    mobileWebUrl = "https://m.dhlottery.co.kr"
                )
            )
        )
    )
    
    // Ïπ¥Ïπ¥Ïò§ÌÜ° ÏÑ§Ïπò ÌôïÏù∏ Î∞è Í≥µÏú†
    if (ShareClient.instance.isKakaoTalkSharingAvailable(context)) {
        // Ïπ¥Ïπ¥Ïò§ÌÜ°ÏúºÎ°ú Í≥µÏú† (Ïï±Ïù¥ Ïó¥Î¶ΩÎãàÎã§)
        ShareClient.instance.shareDefault(context, feedTemplate) { sharingResult, error ->
            if (error != null) {
                // Ïã§Ï†ú ÏóêÎü¨Í∞Ä Î∞úÏÉùÌïú Í≤ΩÏö∞ÏóêÎßå Î©îÏãúÏßÄ ÌëúÏãú
                Toast.makeText(context, "Í≥µÏú† Ïã§Ìå®: ${error.message}", Toast.LENGTH_SHORT).show()
            } else if (sharingResult != null) {
                // Í≥µÏú† ÏÑ±Í≥µ Ïãú - ÏÇ¨Ïö©ÏûêÍ∞Ä Ï±ÑÌåÖÎ∞©ÏùÑ ÏÑ†ÌÉùÌïòÍ≥† Ï†ÑÏÜ°Ìïú ÌõÑÏóê Ìò∏Ï∂úÎê®
                context.startActivity(sharingResult.intent)
                
                // ÏÑ†ÌÉùÏÇ¨Ìï≠: ÏÑ±Í≥µ Î©îÏãúÏßÄÎ•º Î≥¥Ïó¨Ï£ºÍ≥† Ïã∂Îã§Î©¥ Ï£ºÏÑù Ìï¥Ï†ú
                // Toast.makeText(context, "Ïπ¥Ïπ¥Ïò§ÌÜ°ÏúºÎ°ú Í≥µÏú†ÎêòÏóàÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
            }
        }
    } else {
        // Ïπ¥Ïπ¥Ïò§ÌÜ° ÎØ∏ÏÑ§Ïπò: Ïõπ Í≥µÏú† ÏÇ¨Ïö©
        val sharerUrl = WebSharerClient.instance.makeDefaultUrl(feedTemplate)
        
        try {
            // CustomTabsÏúºÎ°ú Ïõπ Í≥µÏú†
            val intent = Intent(Intent.ACTION_VIEW, sharerUrl)
            context.startActivity(intent)
        } catch (e: Exception) {
            Toast.makeText(context, "Ïπ¥Ïπ¥Ïò§ÌÜ°ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
        }
    }
}

/**
 * Ï∂îÏ≤ú Î™®Îìú ÏÑ†ÌÉù Ïπ¥Îìú
 */
@Composable
fun ModeSelectionCard(
    selectedMode: String,
    onModeSelected: (String) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Text(
                text = "üéØ Ï∂îÏ≤ú Î™®Îìú",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Î™®Îìú Î≤ÑÌäºÎì§
            Column(
                modifier = Modifier.fillMaxWidth(),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                ModeButton(
                    mode = "ai",
                    icon = "ü§ñ",
                    title = "AI Ï∂îÏ≤ú (Í∏∞Î≥∏)",
                    description = "ÌÜµÍ≥Ñ Í∏∞Î∞ò ÏµúÏ†ÅÌôî Î≤àÌò∏",
                    isSelected = selectedMode == "ai",
                    onClick = { onModeSelected("ai") }
                )
                
                ModeButton(
                    mode = "random",
                    icon = "üé≤",
                    title = "ÎûúÎç§",
                    description = "ÏôÑÏ†Ñ ÎûúÎç§ Ï∂îÏ≤ú",
                    isSelected = selectedMode == "random",
                    onClick = { onModeSelected("random") }
                )
                
                ModeButton(
                    mode = "conservative",
                    icon = "üõ°Ô∏è",
                    title = "Î≥¥ÏàòÏ†Å",
                    description = "ÏûêÏ£º ÎÇòÏò® Î≤àÌò∏ ÏúÑÏ£º",
                    isSelected = selectedMode == "conservative",
                    onClick = { onModeSelected("conservative") }
                )
                
                ModeButton(
                    mode = "aggressive",
                    icon = "‚ö°",
                    title = "Í≥µÍ≤©Ï†Å",
                    description = "ÎÑìÏùÄ Î≤îÏúÑ Ï∂îÏ≤ú",
                    isSelected = selectedMode == "aggressive",
                    onClick = { onModeSelected("aggressive") }
                )
            }
        }
    }
}

/**
 * Í∞úÎ≥Ñ Î™®Îìú Î≤ÑÌäº
 */
@Composable
fun ModeButton(
    mode: String,
    icon: String,
    title: String,
    description: String,
    isSelected: Boolean,
    onClick: () -> Unit
) {
    Button(
        onClick = onClick,
        modifier = Modifier
            .fillMaxWidth()
            .height(64.dp),
        colors = ButtonDefaults.buttonColors(
            containerColor = if (isSelected) 
                MaterialTheme.colorScheme.primary 
            else 
                MaterialTheme.colorScheme.surface,
            contentColor = if (isSelected)
                MaterialTheme.colorScheme.onPrimary
            else
                MaterialTheme.colorScheme.onSurface
        ),
        elevation = if (isSelected) 
            ButtonDefaults.buttonElevation(defaultElevation = 4.dp)
        else 
            ButtonDefaults.buttonElevation(defaultElevation = 0.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.Start,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = icon,
                fontSize = 24.sp
            )
            Spacer(modifier = Modifier.width(12.dp))
            Column(
                modifier = Modifier.weight(1f),
                verticalArrangement = Arrangement.Center
            ) {
                Text(
                    text = title,
                    fontSize = 15.sp,
                    fontWeight = FontWeight.Bold
                )
                Text(
                    text = description,
                    fontSize = 12.sp,
                    color = if (isSelected)
                        MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f)
                    else
                        MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                )
            }
            if (isSelected) {
                Icon(
                    imageVector = Icons.Default.Check,
                    contentDescription = null,
                    modifier = Modifier.size(20.dp)
                )
            }
        }
    }
}
